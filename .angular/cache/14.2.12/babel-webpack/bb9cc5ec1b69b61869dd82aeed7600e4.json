{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/Samples/angularanulas-master/angularanulas/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { IMonthReport } from \"./report\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { throwError, catchError } from \"rxjs\";\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ReportService {\n  constructor(_http) {\n    this._http = _http;\n    this.reportUrl = 'https://localhost:44316/api/MonthlyReport';\n  }\n\n  getReport(data) {\n    // var headers = new Headers();\n    //let data=JSON.stringify( {'CrudType': '0', 'YearIndex': '2024', 'MonthIndex':'2024'});\n    //  headers.append('Content-Type', 'application/json');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    let options = {\n      headers: headers\n    }; // return this._http.post('https://localhost:44316/api/MonthlyReport', data, { headers: headers })\n    //     .map((response: Response) => <any[]>response.json());\n\n    return this._http.post(this.reportUrl, data, options).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n\n  getReportaync(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      debugger;\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      let options = {\n        headers: headers\n      };\n\n      try {\n        let res = _this._http.post(_this.reportUrl, data, options);\n\n        return res;\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  getMonthReport(data) {\n    // var headers = new Headers();\n    //let data=JSON.stringify( {'CrudType': '0', 'YearIndex': '2024', 'MonthIndex':'2024'});\n    //  headers.append('Content-Type', 'application/json');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    let options = {\n      headers: headers\n    }; // return this._http.post('https://localhost:44316/api/MonthlyReport', data, { headers: headers })\n    //     .map((response: Response) => <any[]>response.json());\n\n    return this._http.post('https://localhost:44316/api/MonthlyReportDetails', data, options).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n\n  handleError(err) {\n    let errorMessage;\n\n    if (err.error instanceof ErrorEvent) {\n      //A client-side or network error occured. Handle it accordingly.\n      errorMessage = `An error occured:${err.error.message}`;\n    } else {\n      //Backend returned an unsuccessful response code.\n      //The response body may contain clues to what went wrong.\n      errorMessage = `Backend retured code ${err.status}:${err.body.catchError}`;\n    }\n\n    console.error(err);\n    return throwError(errorMessage);\n  }\n\n}\n\nReportService.ɵfac = function ReportService_Factory(t) {\n  return new (t || ReportService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nReportService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReportService,\n  factory: ReportService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAkBA,YAAlB,QAAsC,UAAtC;AACA,SAAqBC,WAArB,QAAwC,sBAAxC;AACA,SAAqBC,UAArB,EAAiCC,UAAjC,QAAmD,MAAnD;AACA,SAAcC,GAAd,QAAyB,gBAAzB;;;AAKA,OAAM,MAAOC,aAAP,CAAoB;EAEtBC,YAAoBC,KAApB,EAAqC;IAAjB;IADhB,iBAAU,2CAAV;EAGH;;EACAC,SAAS,CAACC,IAAD,EAAU;IACjB;IACC;IACF;IAEE,IAAIC,OAAO,GAAG,IAAIT,WAAJ,CAAgB;MAC1B,gBAAgB;IADU,CAAhB,CAAd;IAEA,IAAIU,OAAO,GAAG;MAAED,OAAO,EAAEA;IAAX,CAAd,CAPgB,CAShB;IACA;;IAEA,OAAO,KAAKH,KAAL,CAAWK,IAAX,CAAgB,KAAKC,SAArB,EAAgCJ,IAAhC,EAAsCE,OAAtC,EACNG,IADM,CACDV,GAAG,CAAEK,IAAD,IAAeM,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAZ,CAAhB,CADF,EACsDN,UAAU,CAAC,KAAKgB,WAAN,CADhE,CAAP;EAEH;;EACKC,aAAa,CAACX,IAAD,EAAU;IAAA;;IAAA;MACzB;MACA,IAAIC,OAAO,GAAG,IAAIT,WAAJ,CAAgB;QAC1B,gBAAgB;MADU,CAAhB,CAAd;MAEA,IAAIU,OAAO,GAAG;QAAED,OAAO,EAAEA;MAAX,CAAd;;MAEK,IAAI;QACL,IAAIW,GAAG,GAAG,KAAI,CAACd,KAAL,CACPK,IADO,CACF,KAAI,CAACC,SADH,EACcJ,IADd,EACoBE,OADpB,CAAV;;QAEA,OAAOU,GAAP;MACD,CAJE,CAID,OAAOC,KAAP,EAAc;QACdP,OAAO,CAACO,KAAR,CAAcA,KAAd;MACD;IAZsB;EAa3B;;EAEFC,cAAc,CAACd,IAAD,EAAU;IACpB;IACC;IACF;IAEE,IAAIC,OAAO,GAAG,IAAIT,WAAJ,CAAgB;MAC1B,gBAAgB;IADU,CAAhB,CAAd;IAEA,IAAIU,OAAO,GAAG;MAAED,OAAO,EAAEA;IAAX,CAAd,CAPmB,CASnB;IACA;;IAEA,OAAO,KAAKH,KAAL,CAAWK,IAAX,CAAgC,kDAAhC,EAAoFH,IAApF,EAA0FE,OAA1F,EACNG,IADM,CACDV,GAAG,CAAEK,IAAD,IAAeM,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAZ,CAAhB,CADF,EACsDN,UAAU,CAAC,KAAKgB,WAAN,CADhE,CAAP;EAEH;;EACMA,WAAW,CAACK,GAAD,EAAS;IACxB,IAAIC,YAAJ;;IACA,IAAID,GAAG,CAACF,KAAJ,YAAqBI,UAAzB,EAAqC;MACjC;MACAD,YAAY,GAAG,oBAAoBD,GAAG,CAACF,KAAJ,CAAUK,OAAO,EAApD;IACH,CAHD,MAGO;MACH;MACA;MACAF,YAAY,GAAG,wBAAwBD,GAAG,CAACI,MAAM,IAAIJ,GAAG,CAACK,IAAJ,CAAS1B,UAAU,EAAxE;IACH;;IACDY,OAAO,CAACO,KAAR,CAAcE,GAAd;IACA,OAAOtB,UAAU,CAACuB,YAAD,CAAjB;EACH;;AA9DqB;;;mBAAbpB,eAAayB;AAAA;;;SAAbzB;EAAa0B,SAAb1B,aAAa;EAAA2B,YAFX","names":["IMonthReport","HttpHeaders","throwError","catchError","tap","ReportService","constructor","_http","getReport","data","headers","options","post","reportUrl","pipe","console","log","JSON","stringify","handleError","getReportaync","res","error","getMonthReport","err","errorMessage","ErrorEvent","message","status","body","i0","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\Samples\\angularanulas-master\\angularanulas\\src\\app\\reports\\report.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { IReport, IMonthReport } from \"./report\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Observable, throwError, catchError } from \"rxjs\"; \r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class ReportService {\r\nprivate reportUrl='https://localhost:44316/api/MonthlyReport';\r\n    constructor(private _http: HttpClient) {\r\n\r\n    }\r\n     getReport(data: any): Observable<any> {\r\n       // var headers = new Headers();\r\n        //let data=JSON.stringify( {'CrudType': '0', 'YearIndex': '2024', 'MonthIndex':'2024'});\r\n      //  headers.append('Content-Type', 'application/json');\r\n\r\n        let headers = new HttpHeaders({\r\n            'Content-Type': 'application/json'  });\r\n        let options = { headers: headers };\r\n\r\n        // return this._http.post('https://localhost:44316/api/MonthlyReport', data, { headers: headers })\r\n        //     .map((response: Response) => <any[]>response.json());\r\n\r\n        return this._http.post(this.reportUrl, data, options )\r\n        .pipe(tap((data: any) => console.log(JSON.stringify(data))), catchError(this.handleError))\r\n    }\r\n    async getReportaync(data: any): Promise<any> {\r\n        debugger\r\n        let headers = new HttpHeaders({\r\n            'Content-Type': 'application/json'  });\r\n        let options = { headers: headers };\r\n         \r\n             try {\r\n            let res = this._http\r\n              .post(this.reportUrl, data, options);\r\n            return res;\r\n          } catch (error) {\r\n            console.error(error);\r\n          }\r\n     }\r\n\r\n    getMonthReport(data: any): Observable<IMonthReport[]> {\r\n        // var headers = new Headers();\r\n         //let data=JSON.stringify( {'CrudType': '0', 'YearIndex': '2024', 'MonthIndex':'2024'});\r\n       //  headers.append('Content-Type', 'application/json');\r\n \r\n         let headers = new HttpHeaders({\r\n             'Content-Type': 'application/json'  });\r\n         let options = { headers: headers };\r\n \r\n         // return this._http.post('https://localhost:44316/api/MonthlyReport', data, { headers: headers })\r\n         //     .map((response: Response) => <any[]>response.json());\r\n \r\n         return this._http.post<IMonthReport[]>('https://localhost:44316/api/MonthlyReportDetails', data, options )\r\n         .pipe(tap((data: any) => console.log(JSON.stringify(data))), catchError(this.handleError))\r\n     }\r\n    private handleError(err: any) {\r\n        let errorMessage: string;\r\n        if (err.error instanceof ErrorEvent) {\r\n            //A client-side or network error occured. Handle it accordingly.\r\n            errorMessage = `An error occured:${err.error.message}`\r\n        } else {\r\n            //Backend returned an unsuccessful response code.\r\n            //The response body may contain clues to what went wrong.\r\n            errorMessage = `Backend retured code ${err.status}:${err.body.catchError}`\r\n        }\r\n        console.error(err);\r\n        return throwError(errorMessage);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}